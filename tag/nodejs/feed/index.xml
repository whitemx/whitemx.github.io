<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>node.js &#8211; mattwhite.me</title>
	<atom:link href="/tag/nodejs/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Fri, 26 Aug 2022 15:18:59 +0000</lastBuildDate>
	<language>en-GB</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.0.1</generator>
	<item>
		<title>Oh yes, we&#8217;ll need a database</title>
		<link>/2014-5-27-oh-yes-well-need-a-database/</link>
					<comments>/2014-5-27-oh-yes-well-need-a-database/#respond</comments>
		
		<dc:creator><![CDATA[mattwhite]]></dc:creator>
		<pubDate>Fri, 30 May 2014 10:00:00 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[node.js]]></category>
		<guid isPermaLink="false">/2014-5-27-oh-yes-well-need-a-database/</guid>

					<description><![CDATA[I suppose this is the biggie. Since 1996 my database of choice has been the venerable NSF&#160;http://en.wikipedia.org/wiki/Notes_Storage_Facility#Database&#160;which is a Document Oriented Database. Coincidentally the rest of&#46;&#46;&#46;]]></description>
										<content:encoded><![CDATA[<p id="yui_3_10_1_1_1401202982333_15809"><!--{cke_protected}{C}%3C!%2D%2D%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%20standalone%3D%22no%22%3F%2D%2D%3E--><span style="font-size:medium">I suppose this is the biggie. Since 1996 my database of choice has been the venerable NSF&nbsp;</span><a data-cke-saved-href="http://en.wikipedia.org/wiki/Notes_Storage_Facility#Database" href="http://en.wikipedia.org/wiki/Notes_Storage_Facility#Database">http://en.wikipedia.org/wiki/Notes_Storage_Facility#Database</a><span style="font-size:medium">&nbsp;which is a Document Oriented Database. Coincidentally the rest of the world has now caught up and there are some more modern options available to achieve the same things now. The real flavour of the moment is MongoDB&nbsp;</span><a data-cke-saved-href="http://www.mongodb.org/" href="http://www.mongodb.org/">http://www.mongodb.org/</a><span style="font-size:medium">, like the NSF it’s document based and can be replicated between multiple locations. Unlike the NSF it is much more scalable and the old limitations that we were constrained by have largely been mitigated. Of course there is no such thing as a silver bullet, but really there is no comparison between the NSF and modern document oriented databases. You have no idea how sad that makes me, but it is true.</span></p>
<p id="yui_3_10_1_1_1401202982333_16347">Anyway, back to the real world. Every application needs a database, and my choice in this case is <a href="http://mongodb.org/" data-cke-saved-href="http://mongodb.org/" target="_blank" rel="noopener">MongoDB</a>. As ever, this is not a tutorial, the MongoDB website provides quite reasonable documentation to get you going:&nbsp;<a data-cke-saved-href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/" href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/">http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/</a></p>
<p id="yui_3_10_1_1_1401202982333_17129">Now, you could just go with Mongo directly, but in various tutorials I had read about <a href="http://mongoosejs.com/" data-cke-saved-href="http://mongoosejs.com/" target="_blank" rel="noopener">MongooseJS</a>&nbsp;as well. MongoDB is just a database, it doesn’t force you to implement schemas, validation, or really any structure to your data. It may well be the case that you don’t want any of that, in which case go for your life. The syntax for talking to MongoDB is very simple REST calls. But with the addition of MongooseJS we get another layer of abstraction and assistance.</p>
<p>The primary boon for me has been the creation of simple schema’s. Each of the document types in my application has a schema defined; I know what fields will be created, I can create default values for optional fields and I can also create server side validation rules in a nice structured way. It’s also really useful to have a standard way of running code every time a document is saved back to the database.</p>
<p>And at this point we have our first venture into the cloud. It’s very easy to get everything we’re talking about running on your local machine, but what about when you want to show it off to the rest of the world? In my case I’m working with Bruce so for him to test we need an environment. There are hundreds of options available to you, but as with all of these posts I’ll describe what I’m doing.</p>
<div
        class="
          image-block-outer-wrapper
          layout-caption-below
          design-layout-inline
          
          
          
        "
        data-test="image-block-inline-outer-wrapper"
    ></p>
<figure
            class="
              sqs-block-image-figure
              intrinsic
            "
            style="max-width:782px;"
        ></p>
<p>            <button
                class="
                  sqs-block-image-button
                  lightbox
                  
          
        
                "
                data-description="&lt;p&gt;Heroku Console&lt;/p&gt;"
                data-lightbox-theme=""
            ><br />
              <span class="v6-visually-hidden">View fullsize</span></p>
<div
              
              
              class="image-block-wrapper"
              data-animation-role="image"
              
  data-animation-override

          ></p>
<div class="sqs-image-shape-container-element
              
          
        
              has-aspect-ratio
            " style="
                position: relative;
                
                  padding-bottom:46.1636848449707%;
                
                overflow: hidden;
              "
              ><br />
              <noscript><img src="/wp-content/uploads/2022/08/3_image-asset.png" alt="Heroku Console" /></noscript><img class="thumb-image" src="/wp-content/uploads/2022/08/3_image-asset.png" data-image="/wp-content/uploads/2022/08/3_image-asset.png" data-image-dimensions="782x361" data-image-focal-point="0.5,0.5" alt="Heroku Console" data-load="false" data-image-id="5384a9ade4b085f9cb168471" data-type="image" />
            </div>
</p></div>
<p>            </button><figcaption class="image-caption-wrapper">
<div class="image-caption">
<p>Heroku Console</p>
</div>
</figcaption></figure>
</p></div>
<p>First we have the node.js hosting, where we’re using Heroku. It’s nice and simple to create a development instance that runs on a <a target="_blank" href="https://devcenter.heroku.com/articles/dynos" rel="noopener">single dyno</a>&nbsp;and then add plugins for things like console management, monitoring and so on. But we also need somewhere to host the database itself. For this we’re currently using <a target="_blank" href="https://mongolab.com/" rel="noopener">MongoLab</a>&nbsp;which again is very easy to set up a development database instance. The key thing about both of these development environments is that they are free. So I can do a Git push from my repo, and add configuration to the application to point to Mongolab for data storage and suddenly my application is running in the cloud.</p>
<div
        class="
          image-block-outer-wrapper
          layout-caption-below
          design-layout-inline
          
          
          
        "
        data-test="image-block-inline-outer-wrapper"
    ></p>
<figure
            class="
              sqs-block-image-figure
              intrinsic
            "
            style="max-width:789px;"
        ></p>
<p>            <button
                class="
                  sqs-block-image-button
                  lightbox
                  
          
        
                "
                data-description="&lt;p&gt;MongoLab console&lt;/p&gt;"
                data-lightbox-theme=""
            ><br />
              <span class="v6-visually-hidden">View fullsize</span></p>
<div
              
              
              class="image-block-wrapper"
              data-animation-role="image"
              
  data-animation-override

          ></p>
<div class="sqs-image-shape-container-element
              
          
        
              has-aspect-ratio
            " style="
                position: relative;
                
                  padding-bottom:22.940431594848633%;
                
                overflow: hidden;
              "
              ><br />
              <noscript><img src="/wp-content/uploads/2022/08/4_image-asset.png" alt="MongoLab console" /></noscript><img class="thumb-image" src="/wp-content/uploads/2022/08/4_image-asset.png" data-image="/wp-content/uploads/2022/08/4_image-asset.png" data-image-dimensions="789x181" data-image-focal-point="0.5,0.5" alt="MongoLab console" data-load="false" data-image-id="5384aa06e4b05a0167521f27" data-type="image" />
            </div>
</p></div>
<p>            </button><figcaption class="image-caption-wrapper">
<div class="image-caption">
<p>MongoLab console</p>
</div>
</figcaption></figure>
</p></div>
<p>This is all worryingly simple isn’t it?&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>/2014-5-27-oh-yes-well-need-a-database/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Jade HTML Template Engine</title>
		<link>/2014-5-27-jade-html-template-engine/</link>
					<comments>/2014-5-27-jade-html-template-engine/#comments</comments>
		
		<dc:creator><![CDATA[mattwhite]]></dc:creator>
		<pubDate>Thu, 29 May 2014 10:00:00 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[node.js]]></category>
		<guid isPermaLink="false">/2014-5-27-jade-html-template-engine/</guid>

					<description><![CDATA[In the last post I mentioned that when you start using Express, you are nudged towards Jade to create your HTML. At its simplest, Jade provides&#46;&#46;&#46;]]></description>
										<content:encoded><![CDATA[<p>In the last post I mentioned that when you start using Express, you are nudged towards Jade to create your HTML.</p>
<p>At its simplest, Jade provides a way to make your HTML more terse. To produce HTML like this:</p>
<p><script src="https://gist.github.com/whitemx/326270cb2779dcb69a07.js"></script></p>
<p id="yui_3_10_1_1_1401193974092_21895">We would only need to enter Jade like this:</p>
<p><script src="https://gist.github.com/whitemx/abc2359519721e4a21fb.js"></script></p>
<p>We can break up the contents of our pages, so in this example the head contents are defined in a different file and can be shared across multiple pages. The syntax is very simple, indentation is used to nest elements within each other and you can add ID, class and other attributes with simple markup.</p>
<p>But really the power is that you can also do simple scripting inside the Jade file. So you can conditionally load chunks of the page based on data that you pass into the page. And then you can also pass in variables to the Jade template to be used when building the HTML. In the example above, the title is passed into the page as a variable from the route configuration.</p>
<p><script src="https://gist.github.com/whitemx/01fbb529779dd413924a.js"></script></p>
<p>Of course you can bind field onto your database using similar techniques.&nbsp;</p>
<p>The structure of my real world application has a layout Jade file which itself is made up of several Jade files: head, header, footer, and foot. In the head I have all of my CSS and web attributes. The header is the navigation header for the site. The footer is a static footer navigation bar and the foot contains all of the JavaScript files that need to be downloaded to the client. In between header and footer I can insert my content.</p>
<p><script src="https://gist.github.com/whitemx/35a5ea7b93a32ef3acd4.js"></script><script src="https://gist.github.com/whitemx/2105de2bcd70a37d410d.js"></script></p>
<p>The momentum in the web development world is very much towards AngularJS at the moment which doesn&#8217;t really sit with Jade too well. It is possible to use both but they tread on each others toes rather a lot so it may end up being more trouble than it&#8217;s worth. But for my purposes Jade and jQuery are working well together for me at the moment.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2014-5-27-jade-html-template-engine/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>Express web application framework</title>
		<link>/2014-5-27-express-web-application-framework/</link>
					<comments>/2014-5-27-express-web-application-framework/#comments</comments>
		
		<dc:creator><![CDATA[mattwhite]]></dc:creator>
		<pubDate>Wed, 28 May 2014 10:00:00 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[node.js]]></category>
		<guid isPermaLink="false">/2014-5-27-express-web-application-framework/</guid>

					<description><![CDATA[Having created a simple application and installed our first NPM package, now things start to get serious. We want to start building out our real application,&#46;&#46;&#46;]]></description>
										<content:encoded><![CDATA[<p><!--?xml version="1.0" encoding="UTF-8" standalone="no"?--><span style="font-size:medium">Having created a simple application and installed our first NPM package, now things start to get serious. We want to start building out our real application, there will be more than one page, we’ll need client side JavaScript and CSS files. Organising all of this is important, you will have hundreds of files before you know it. This is where <a target="_blank" href="http://expressjs.com/" rel="noopener">Express</a> comes in.</span></p>
<p>If we install the basic Express npm package then we can get one of the biggest advantages for us, that is routing. I can define URLs and URL patterns that make up my application and then map functionality onto each one as I see fit. As you get more advanced you can start defining middleware steps that test security before allowing the user to get to a page. It makes your application configuration orders of magnitude simpler to look after. From my point of view at the moment, if you wanted to create a node.js web application that didn’t use Express then I’d want a very good reason why.</p>
<p>The basic installation is very simple, simply edit your package.json file and add express as a dependency:</p>
<p><script src="https://gist.github.com/whitemx/d881b45c43ed9fdde209.js"></script></p>
<p id="yui_3_10_1_1_1401186089911_39216">Then, from the terminal, run “npm install”. You’ll see a bunch of new files installed under node_modules and can now start modifying the server.js file:</p>
<p><script src="https://gist.github.com/whitemx/35e795e599cc4e0c2fc0.js"></script></p>
<p id="yui_3_10_1_1_1401186089911_41129">The key section is the line that starts app.get. This tells the application that it wants to listen for GET requests at the URL “/hello.txt” and what to do when someone requests that page, in this case just return some Hello World text. If the user requests a different URL then they’ll get an error. And of course you can also configure your routes to listen for PUT, POST and DELETE requests. And hopefully at this point you’ll see what’s happening, you now have the simple ability to support CRUD in your application, whether that be from web browsers or creating a REST API.</p>
<p>In the real world you’ll want to move your application logic off to other files before the server.js file becomes too large and unwieldy, so you can equally have lines like this:</p>
<p><script src="https://gist.github.com/whitemx/6b91d610566c91937f14.js"></script></p>
<p id="yui_3_10_1_1_1401186089911_43695">In this example I’ve moved the business logic into a file called hello.js that lives in a subfolder from the root of my application: app/controllers/hello.js. You can put all of your hello world application functions into that file to keep things nicely organised.</p>
<p>In fact I actually move the routes themselves off to a separate file, so that the server.js really is just the instantiation of objects rather than any real business logic.</p>
<p>But this is not the extent of what Express can offer you. If you’re starting from scratch you’ll probably want to server up static content like CSS, images, client side JavaScript etc. Express can manage all of that for you as well, but it’s easier to create a new application:</p>
<p><script src="https://gist.github.com/whitemx/1d5dfd07b919e89e53c0.js"></script></p>
<div
        class="
          image-block-outer-wrapper
          layout-caption-below
          design-layout-inline
          
          
          
        "
        data-test="image-block-inline-outer-wrapper"
    ></p>
<figure
            class="
              sqs-block-image-figure
              intrinsic
            "
            style="max-width:159px;"
        ></p>
<div
              
              
              class="image-block-wrapper"
              data-animation-role="image"
              
  data-animation-override

          ></p>
<div class="sqs-image-shape-container-element
              
          
        
              has-aspect-ratio
            " style="
                position: relative;
                
                  padding-bottom:212.57861328125%;
                
                overflow: hidden;
              "
              ><br />
              <noscript><img src="/wp-content/uploads/2022/08/5_image-asset.png" alt="Structure of new demo app" /></noscript><img class="thumb-image" src="/wp-content/uploads/2022/08/5_image-asset.png" data-image="/wp-content/uploads/2022/08/5_image-asset.png" data-image-dimensions="159x338" data-image-focal-point="0.5,0.5" alt="Structure of new demo app" data-load="false" data-image-id="53848221e4b050f84ce32600" data-type="image" />
            </div>
</p></div><figcaption class="image-caption-wrapper">
<div class="image-caption">
<p>Structure of new demo app</p>
</div>
</figcaption></figure>
</p></div>
<p>The first line generates a new application with placeholder content including CSS and <a target="_blank" href="http://jade-lang.com/" rel="noopener">Jade</a> files and a place to insert your own client side JavaScript. This is more complex than it sounds because, of course, all of the routes to the static files have to be configured. Once the app has been generated you can move to its directory, and then run an npm install to get all of the required modules as defined in the auto generated package.json file. Finally we can run the application with npm start. This kicks off the application listening on port 3000 and we can load it in the browser.</p>
<div
        class="
          image-block-outer-wrapper
          layout-caption-below
          design-layout-inline
          
          
          
        "
        data-test="image-block-inline-outer-wrapper"
    ></p>
<figure
            class="
              sqs-block-image-figure
              intrinsic
            "
            style="max-width:339px;"
        ></p>
<div
              
              
              class="image-block-wrapper"
              data-animation-role="image"
              
  data-animation-override

          ></p>
<div class="sqs-image-shape-container-element
              
          
        
              has-aspect-ratio
            " style="
                position: relative;
                
                  padding-bottom:75.22123718261719%;
                
                overflow: hidden;
              "
              ><br />
              <noscript><img src="/wp-content/uploads/2022/08/6_image-asset.png" alt="" /></noscript><img class="thumb-image" src="/wp-content/uploads/2022/08/6_image-asset.png" data-image="/wp-content/uploads/2022/08/6_image-asset.png" data-image-dimensions="339x255" data-image-focal-point="0.5,0.5" alt="" data-load="false" data-image-id="53848253e4b08193c94c448f" data-type="image" />
            </div>
</p></div>
</figure></div>
<p id="yui_3_10_1_1_1401186089911_49400">The point of a framework is to make life easier, there is no reason you couldn’t set all of this up manually yourself, but there really is no reason to. The rest of the world seems to use Express as a standard and it does everything you could possibly want, well at least I’ve not come across anything that I couldn’t do yet.&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>/2014-5-27-express-web-application-framework/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>NPM or Node Module Packages</title>
		<link>/2014-5-23-npm-or-node-module-packages/</link>
					<comments>/2014-5-23-npm-or-node-module-packages/#respond</comments>
		
		<dc:creator><![CDATA[mattwhite]]></dc:creator>
		<pubDate>Tue, 27 May 2014 10:00:00 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[node.js]]></category>
		<guid isPermaLink="false">/2014-5-23-npm-or-node-module-packages/</guid>

					<description><![CDATA[After getting your development environment set up and your fancy schmancy Hello World application running&#160;what next? Let’s say we want to display a nicely formatted version&#46;&#46;&#46;]]></description>
										<content:encoded><![CDATA[<p><!--?xml version="1.0" encoding="UTF-8" standalone="no"?--><span style="font-size:medium">After getting your <a href="http://mattwhite.me/blog/2014/5/23/but-first-the-development-environment">development environment</a> set up and your fancy schmancy <a target="_blank" href="http://howtonode.org/hello-node" rel="noopener">Hello World application</a> running</span><span style="font-size:medium">&nbsp;what next?</span></p>
<p><script src="https://gist.github.com/whitemx/216f9af708d9d2aef07c.js"></script></p>
<p>Let’s say we want to display a nicely formatted version of the current date and time. The current best of breed for date and time handling in JavaScript is called <a target="_blank" href="http://momentjs.com/" rel="noopener">Moment</a>&nbsp;and we can choose to use it either server side or client side. For our purposes here, we’ll use it server side, which means we need to install it into our application.</p>
<p>First we’ll want to create a file called package.json which acts as the main configuration point for the application. One of the things it stores is which <a target="_blank" href="https://www.npmjs.org/" rel="noopener">NPM packages</a> we have installed and which version of each package we want to use.</p>
<p><script src="https://gist.github.com/whitemx/1376a7681aeb28cda4b2.js"></script></p>
<p id="yui_3_10_1_1_1400851929881_66192">From the terminal we can now install moment:&nbsp;</p>
<figure >
<blockquote data-animation-role="quote" 
<p>    data-animation-override><br />
    <span>&#8220;</span>npm install —save moment<span>&#8221;</span>
  </p></blockquote>
</figure>
<p>You’ll find the package.json file has been modified to include a dependency for moment and you’ll also see a new folder in your project called node_modules that contains the source code for the package. Rule of thumb is that you’ll never be editing files in that folder.</p>
<p>What we can now do though is start to use the newly imported package in our own code.</p>
<p>So we’ll add some extra code to the line which returns Hello World:</p>
<p><script src="https://gist.github.com/whitemx/62a6b1c8a3c1bb12b935.js"></script></p>
<p id="yui_3_10_1_1_1400851929881_70581">And when that runs in the browser we see something like:</p>
<figure >
<blockquote data-animation-role="quote" 
<p>    data-animation-override><br />
    <span>&#8220;</span>Hello World<br />The day will end in 8 hours<span>&#8221;</span>
  </p></blockquote>
</figure>
<p>As I write this there are nearly 75,000 packages available from NPM, so this is where you have to get into the mindset that if you are writing something new, then you are probably not writing something new. Leverage what has already been put out there.</p>
<p>Of course there are always issues. In your dependencies in package.json you’ll see that moment has been added with a version number, something like “^2.6.0”. You can also set this to be &#8220;latest&#8221;, but this means that whenever you run an “npm install” against your application, that NPM will look to see if a more recent version has been released and upgrade it for you. You need to be very aware of this. I recently ran a general install and found that Express had been upgraded from version 3 to 4. This broke my entire application and I had to roll back in Git to recover. So you have to become highly attuned to the impact of what is being upgraded. Things that are important to you, like Express, you should probably fix the version (by removing the ^ from the dependency), whereas things that are more utility helpers like moment you can probably just change to “latest”.</p>
<p>There is a huge amount more that you can do with NPM and it’s worth reading up on it. It’s probably your biggest friend when getting started with node.&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>/2014-5-23-npm-or-node-module-packages/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>But first the development environment</title>
		<link>/2014-5-23-but-first-the-development-environment/</link>
					<comments>/2014-5-23-but-first-the-development-environment/#comments</comments>
		
		<dc:creator><![CDATA[mattwhite]]></dc:creator>
		<pubDate>Mon, 26 May 2014 10:00:00 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[node.js]]></category>
		<guid isPermaLink="false">/2014-5-23-but-first-the-development-environment/</guid>

					<description><![CDATA[I started a series of blog posts about my work with node.js last week. And of course the thing I forgot to mention is the actual&#46;&#46;&#46;]]></description>
										<content:encoded><![CDATA[<p id="yui_3_10_1_1_1400851929881_27540"><!--{cke_protected}{C}%3C!%2D%2D%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%20standalone%3D%22no%22%3F%2D%2D%3E--><span style="font-size:medium">I started a series of blog posts about my work with node.js last week. And of course the thing I forgot to mention is the actual process of development.&nbsp;</span></p>
<p id="yui_3_10_1_1_1400851929881_27541">A lot of people seem to really like using <a href="http://www.jetbrains.com/webstorm/" data-cke-saved-href="http://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">Webstorm from Jetbrains</a>.&nbsp;and it’s certainly a full featured tool. I tried it for ten days and just couldn’t get used to it. So I now spend my days living inside three different windows: Sublime Text for editing, Chrome for browser testing and the Terminal for running node.js.</p>
<p id="yui_3_10_1_1_1400851929881_27542">If you’ve not yet used <a href="http://www.sublimetext.com/" data-cke-saved-href="http://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text</a> then it’s worth having a look, it’s a text editor but on steroids, so it will has awareness of different text file formats: JS, HTML, CSS etc etc and will offer basic code completion. But will also allow you to edit multiple lines of text at once, it has all sorts of plugins and so on.</p>
<p id="yui_3_10_1_1_1400851929881_27543">Chrome has become my defacto standard for browser testing (although I actually use Safari for actual web browsing). Its developer tools are unmatched, and more recently it has also offered basic emulation of mobile devices. Definitely not the same as running on the real thing, but good for basic testing.</p>
<p id="yui_3_10_1_1_1400851929881_27544">And then finally there is the terminal window. As my colleagues will testify, I am not a command line sort of geek, it just feels too much like a hair shirt to me. But with node.js development there really is no avoiding it so it’s worth learning a little. Although to be honest my usual workflow is to have two terminal tabs open: one in which I type “npm start” and the other in which I type “grunt watch”. The first of these launches my dev server running on port 3000. While it’s running in dev mode it will automatically pick up changes I make to source code and restart itself as required. I can also print out to the console if I need to do some debugging.</p>
<div
        class="
          image-block-outer-wrapper
          layout-caption-below
          design-layout-inline
          
          
          
        "
        data-test="image-block-inline-outer-wrapper"
    ></p>
<figure
            class="
              sqs-block-image-figure
              intrinsic
            "
            style="max-width:2500px;"
        ></p>
<p>            <button
                class="
                  sqs-block-image-button
                  lightbox
                  
          
        
                "
                data-description="&lt;p&gt;A screen capture of my working environment&lt;/p&gt;"
                data-lightbox-theme=""
            ><br />
              <span class="v6-visually-hidden">View fullsize</span></p>
<div
              
              
              class="image-block-wrapper"
              data-animation-role="image"
              
  data-animation-override

          ></p>
<div class="sqs-image-shape-container-element
              
          
        
              has-aspect-ratio
            " style="
                position: relative;
                
                  padding-bottom:56.23999786376953%;
                
                overflow: hidden;
              "
              ><br />
              <noscript><img src="/wp-content/uploads/2022/08/7_image-asset.png" alt="A screen capture of my working environment" /></noscript><img class="thumb-image" src="/wp-content/uploads/2022/08/7_image-asset.png" data-image="/wp-content/uploads/2022/08/7_image-asset.png" data-image-dimensions="2500x1406" data-image-focal-point="0.5,0.5" alt="A screen capture of my working environment" data-load="false" data-image-id="537f5687e4b05b209b32fcc0" data-type="image" />
            </div>
</p></div>
<p>            </button><figcaption class="image-caption-wrapper">
<div class="image-caption">
<p>A screen capture of my working environment</p>
</div>
</figcaption></figure>
</p></div>
<p id="yui_3_10_1_1_1400851929881_19931">The latter command launches <a href="http://gruntjs.com/" data-cke-saved-href="http://gruntjs.com/" target="_blank" rel="noopener">GruntJS</a>&nbsp;which is a task runner. This allows me to have scripts to run every time I make a change to a subset of files. In my dev environment, I want my JS and CSS files to be automatically minified. And then I can also have it automatically run unit tests against my code, or JS Lint checks to make sure I’m not introducing too many bugs.</p>
<p id="yui_3_10_1_1_1400851929881_20782">The other thing that you need to get working with very early on (if it’s not already baked into your workflow) is some sort of source control system. You will be editing a lot of files and it’s easy to lose track, so why not offload that task onto a tool. In my case (as with 90% of the development world it seems) I use Git and <a href="http://github.com/" data-cke-saved-href="http://github.com/" target="_blank" rel="noopener">Github</a>. This has the nice advantage that <a href="http://heroku.com/" data-cke-saved-href="http://heroku.com/" target="_blank" rel="noopener">Heroku</a> (my application hosting platform) also allows me to push up changes from my Git client as and when I need to. Talking of Git clients, I am switching between <a href="http://www.sourcetreeapp.com/" data-cke-saved-href="http://www.sourcetreeapp.com/" target="_blank" rel="noopener">Source Tree</a> and <a href="http://www.git-tower.com/" data-cke-saved-href="http://www.git-tower.com/" target="_blank" rel="noopener">Tower</a> these days (see what I mean about avoiding the command line when I can).</p>
<p id="yui_3_10_1_1_1400851929881_23500">Of course everyone has their own way of working and the dev workflow for node in particular it seems like you could spend your whole life perfecting the workflow rather than actually doing any work so don’t get too hung up on it, but this is what works for me.&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>/2014-5-23-but-first-the-development-environment/feed/</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
			</item>
		<item>
		<title>Getting started with node.js</title>
		<link>/2014-5-23-getting-started-with-nodejs/</link>
					<comments>/2014-5-23-getting-started-with-nodejs/#comments</comments>
		
		<dc:creator><![CDATA[mattwhite]]></dc:creator>
		<pubDate>Fri, 23 May 2014 12:38:33 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[node.js]]></category>
		<guid isPermaLink="false">/2014-5-23-getting-started-with-nodejs/</guid>

					<description><![CDATA[As you may know I&#8217;ve been writing Domino web applications in one form or another for 18 years now (good God that&#8217;s a long time). But&#46;&#46;&#46;]]></description>
										<content:encoded><![CDATA[<p>As you may know I&#8217;ve been writing Domino web applications in one form or another for 18 years now (good God that&#8217;s a long time). But over the last few months I&#8217;ve been working on a <a target="_blank" href="http://nodejs.org/" rel="noopener">node.js</a> application. I&#8217;ve learned a huge amount, but am still really a newb when it comes to node, so bear that in mind when you read my blog posts over the next few weeks and months.</p>
<p>The first question, I suppose, is &#8220;What is node.js?&#8221;. Well, the simple answer is that it&#8217;s a JavaScript engine that will do whatever you tell it. It will run on whatever platform you care to mention, I am using my Mac, but it will also run on Windows or Linux. The most popular use seems to be to write web applications, but you can equally write utilities for data migration or anything else that you can think of really. Everything you write is in JavaScript, and much like with XPages, you get to write JavaScript that runs on the server side and the client side.</p>
<p>The node.js community is huge and there are vast amounts of resources out there to get you going, so your first thought whenever you want to achieve something is &#8220;has someone already done this&#8221;. In most cases they will have. Enter <a target="_blank" href="https://www.npmjs.org/" rel="noopener">NPM </a>or Node Packaged Modules. You can simply install packages into your application and make use of them, much as you would with JAR files in Java.</p>
<p>What I have learned with node.js so far is that there is a package for almost everything you could want to do, and there are also frameworks to make managing your applications easier. This becomes important pretty quickly, otherwise your code will get out of hand. So over the next few posts I&#8217;m going to be talking about each of the major aspects of the application I&#8217;m working on, without actually talking about the application itself, that will come later I hope.</p>
<p>What this won&#8217;t be is a tutorial, there are plenty of great tutorials out there already, I&#8217;d recommend one of the following:</p>
<ul>
<li>Lynda.com:&nbsp;<a href="http://www.lynda.com/Nodejs-tutorials/Nodejs-First-Look/101554-2.html">http://www.lynda.com/Nodejs-tutorials/Nodejs-First-Look/101554-2.html</a></li>
<li><a href="http://www.nodebeginner.org/">http://www.nodebeginner.org/</a>&nbsp;</li>
</ul>
<p>Be aware, node.js is evolving very fast, so things can get out of date pretty quickly, but the themes are still generally valid.</p>
<p>Your best bet for an over-arching framework is called <a target="_blank" href="http://expressjs.com/" rel="noopener">Express</a>. This is far and away the most popular framework for creating a web application. It recently upgraded to version 4, I am using version 3 for the moment so am already out of date!</p>
<p>You&#8217;ll probably want a database for your application as well. There is plenty of choice, there&#8217;s no reason, for example, why you couldn&#8217;t continue to use your NSF with a REST API in front of it, but the reality is that there are better options out there. Again the darling of the moment is <a target="_blank" href="http://www.mongodb.org/" rel="noopener">MongoDB</a>. This is a whole subject in itself, but in my case the application requirements are pretty simple and we&#8217;re used to thinking in terms of non relational databases so MongoDB makes a lot of sense right away. To integrate it into node.js and provide some simple structure to my application, I am using a framework called <a target="_blank" href="http://mongoosejs.com/" rel="noopener">Mongoose</a>.</p>
<p>That&#8217;s three elements then, server, application framework and database. What about the front end? The norm, it seems is to use <a target="_blank" href="https://angularjs.org/" rel="noopener">AngularJS</a>. Together these four elements create the <a target="_blank" href="http://mean.io/" rel="noopener">MEAN stack</a> (Mongo Express Angular Node). But this is where I diverge slightly. I still can&#8217;t quite get my poor old head around Angular, it still feels like too much work to me, so I am using plain old HTML in the form of <a target="_blank" href="http://jade-lang.com/" rel="noopener">Jade </a>and <a target="_blank" href="http://jquery.com/" rel="noopener">jQuery</a>.</p>
<p>Once you get into creating the application itself, then again we can turn to NPM and start making use of the great work that other people have done to quickly get going. For example, with authentication we can use <a target="_blank" href="http://passportjs.org/" rel="noopener">Passport</a>, for email integration we have <a target="_blank" href="http://www.mailgun.com/" rel="noopener">Mailgun</a>, for file attachments we have <a target="_blank" href="http://aws.amazon.com/s3/" rel="noopener">Amazon S3</a>, full text searching there is <a target="_blank" href="http://www.elasticsearch.org/" rel="noopener">Elastic Search</a>, real time browser interaction we can use <a target="_blank" href="http://socket.io/" rel="noopener">socket.io</a> and for credit card processing there is <a target="_blank" href="https://stripe.com/gb" rel="noopener">Stripe</a>.</p>
<p>The other thing to get involved in is hosting the application. I&#8217;ve mentioned a bunch of technology already, and so far I have it all running in the cloud for zero cost. It&#8217;s obviously all dev rather than production, but there are hundreds of choices, so again I&#8217;ll go through what I have chosen. But the headlines are: <a target="_blank" href="https://www.heroku.com/" rel="noopener">Heroku </a>for node.js hosting, <a target="_blank" href="https://mongolab.com/welcome/" rel="noopener">MongoLab </a>for MongoDB hosting, <a target="_blank" href="http://www.searchly.com/" rel="noopener">Searchly </a>for Elastic Search hosting, <a target="_blank" href="https://stripe.com/gb" rel="noopener">Stripe </a>to process credit cards and Amazon AWS for file attachment storage.</p>
<p>There we go, nice and simple; just learn twenty new technologies in 3 months! Honestly it&#8217;s not as scary or difficult as it sounds. I mean if I can do it then so can you.</p>
<p>My plan over the next few weeks is to dip into each of the areas I&#8217;ve mentioned above and describe how I&#8217;m using them. If you&#8217;ve got questions or things to add then I&#8217;d love to hear them, this is as much a learning experience for me as it is for you I can promise you.</p>
<p> </p>
]]></content:encoded>
					
					<wfw:commentRss>/2014-5-23-getting-started-with-nodejs/feed/</wfw:commentRss>
			<slash:comments>6</slash:comments>
		
		
			</item>
	</channel>
</rss>
